<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-12-19 at 06:37:13.
 */
class ControllerRouteTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var ControllerRoute
	 */
	protected $route;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->route = new ControllerRoute;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	/**
	 * @covers ControllerRoute::load
	 * @todo   Implement testLoad().
	 */
	public function testLoad() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::setRoute
	 */
	public function testSetRouteDetectsPartial() {
		$this->route->setPartial(false);
		$this->route->setRoute('partial/foo');
		$this->assertTrue($this->route->isPartial());

		$this->route->setPartial(false);
		$this->route->setRoute('something/partial/foo');
		$this->assertFalse($this->route->isPartial());

		$this->route->setPartial(false);
		$this->route->setRoute('something/partial');
		$this->assertFalse($this->route->isPartial());
	}

	/**
	 * @covers ControllerRoute::setRoute
	 */
	public function testSetRouteDetectsExtension() {
		$this->route->setRoute('index.json?abcd');
		//$this->assertEquals('IndexController', $this->route->getControllerClass());
		$this->assertEquals('json', $this->route->getExtension());

		$this->route->setRoute('index.xml');
		$this->assertEquals('xml', $this->route->getExtension());
	}

	public function testSetRouteDetectsParams() {
		$this->route->setRoute('index/index/param1/param2');
		$this->assertEquals(array('param1', 'param2'), $this->route->getParams());
	}

	/**
	 * @covers ControllerRoute::setRoute
	 */
	public function testSetRouteIgnoresQueryString() {
		$this->route->setRoute('index.json?abcd');
		$this->assertEquals('IndexController', $this->route->getControllerClass());
		$this->assertEquals('json', $this->route->getExtension());
	}

	/**
	 * @covers ControllerRoute::setHeaders
	 */
	public function testSetHeadersDetectsJson() {
		$this->route->setHeaders(array('Accept' => 'application/json'));
		$this->assertEquals('json', $this->route->getExtension());
	}

	/**
	 * @covers ControllerRoute::setHeaders
	 */
	public function testSetHeadersDetectsXml() {
		$this->route->setHeaders(array('Accept' => 'application/xml'));
		$this->assertEquals('xml', $this->route->getExtension());
	}

	/**
	 * @covers ControllerRoute::setHeaders
	 */
	public function testSetHeadersDetectsHttpVerb() {
		$this->route->setHeaders(array('X-Http-Method-Override' => 'post'));
		$this->assertEquals('POST', $this->route->getHttpVerb());

		$this->route->setHeaders(array('X-Http-Method' => 'GET'));
		$this->assertEquals('GET', $this->route->getHttpVerb());
	}

	/**
	 * @covers ControllerRoute::setHeaders
	 */
	public function testSetHeadersDetectsAjax() {
		$this->route->setPartial(false);
		$this->route->setHeaders(array('X-Requested-With' => 'XMLHttpRequest'));
		$this->assertTrue($this->route->isPartial());
	}

	/**
	 * @covers ControllerRoute::setRequestParams
	 */
	public function testSetRequestParamsDetectsJsonP() {
		$this->route->setRequestParams(array('jsonp' => 'myCallback'));
		$this->assertEquals('jsonp', $this->route->getExtension());
		$this->assertEquals('myCallback', $this->route->getJsonPCallback());
	}

	public function testSetRequestParamsDetectsJsonPCallback() {
		$this->route->setRequestParams(array('callback' => 'myCallback'));
		$this->assertEquals('jsonp', $this->route->getExtension());
		$this->assertEquals('myCallback', $this->route->getJsonPCallback());
	}

	/**
	 * @covers ControllerRoute::getRoute
	 * @todo   Implement testGetRoute().
	 */
	public function testGetRoute() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getSegments
	 * @todo   Implement testGetSegments().
	 */
	public function testGetSegments() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getExtension
	 * @todo   Implement testGetExtension().
	 */
	public function testGetExtension() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getJsonPCallback
	 * @todo   Implement testGetJsonPCallback().
	 */
	public function testGetJsonPCallback() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getAction
	 * @todo   Implement testGetAction().
	 */
	public function testGetAction() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getParams
	 * @todo   Implement testGetParams().
	 */
	public function testGetParams() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::setPartial
	 * @todo   Implement testSetPartial().
	 */
	public function testSetPartial() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::isPartial
	 * @todo   Implement testIsPartial().
	 */
	public function testIsPartial() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::setRestful
	 * @todo   Implement testSetRestful().
	 */
	public function testSetRestful() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::isRestful
	 * @todo   Implement testIsRestful().
	 */
	public function testIsRestful() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getHttpVerb
	 * @todo   Implement testGetHttpVerb().
	 */
	public function testGetHttpVerb() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getControllerDir
	 * @todo   Implement testGetControllerDir().
	 */
	public function testGetControllerDir() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getControllerClass
	 * @todo   Implement testGetControllerClass().
	 */
	public function testGetControllerClass() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getViewDir
	 * @todo   Implement testGetViewDir().
	 */
	public function testGetViewDir() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ControllerRoute::getController
	 * @todo   Implement testGetController().
	 */
	public function testGetController() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}
